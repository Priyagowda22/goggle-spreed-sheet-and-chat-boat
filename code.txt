Goggle sheet chat boot

// Assignment 1: Web Application Mimicking Google Sheets
// Tech Stack: React.js (Next.js) + Handsontable for Spreadsheet UI
// Backend: Node.js (Express.js) for Data Processing

// Install Dependencies:
// npm install next react react-dom handsontable express cors body-parser axios mongoose

// ---------------- FRONTEND (React + Next.js) ----------------
// pages/index.js - Main Spreadsheet UI
import React, { useState, useRef } from 'react';
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.css';
import axios from 'axios';

const Home = () => {
    const hotRef = useRef(null);
    const [data, setData] = useState(Array(10).fill(Array(10).fill('')));
    
    const saveSpreadsheet = async () => {
        await axios.post('http://localhost:5000/save', { data });
    };

    return (
        <div>
            <h1>Google Sheets Clone</h1>
            <button onClick={saveSpreadsheet}>Save</button>
            <div ref={hotRef} />
        </div>
    );
};

export default Home;

// ---------------- BACKEND (Node.js + Express) ----------------
// server.js - Handles API for spreadsheet data
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/spreadsheet', { useNewUrlParser: true, useUnifiedTopology: true });
const SheetSchema = new mongoose.Schema({ data: Array });
const Sheet = mongoose.model('Sheet', SheetSchema);

app.post('/save', async (req, res) => {
    const sheet = new Sheet({ data: req.body.data });
    await sheet.save();
    res.send('Saved');
});

app.listen(5000, () => console.log('Server running on port 5000'));

// ---------------- ASSIGNMENT 2: CDP Chatbot ----------------
// chatbot.js - Simple FAQ Chatbot for CDP
const fetch = require('node-fetch');
const OPENAI_API_KEY = 'your-api-key';

async function getCDPResponse(question) {
    const response = await fetch('https://api.openai.com/v1/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4',
            prompt: `Answer the following CDP question based on official documentation: ${question}`,
            max_tokens: 200
        })
    });
    const data = await response.json();
    return data.choices[0].text;
}

// Express API for chatbot
app.post('/chat', async (req, res) => {
    const answer = await getCDPResponse(req.body.question);
    res.send({ answer });
});

// Run the backend server for both tasks
a pp.listen(5000, () => console.log('Chatbot & Sheets API running on port 5000'));

// This covers both assignments - Google Sheets Clone & CDP Chatbot!



2nd type
// Assignment 1: Web Application Mimicking Google Sheets
// Tech Stack: React.js (Next.js) + Handsontable for Spreadsheet UI
// Backend: Node.js (Express.js) for Data Processing

// Install Dependencies:
// npm install next react react-dom handsontable express cors body-parser axios mongoose

// ---------------- FRONTEND (React + Next.js) ----------------
// pages/index.js - Main Spreadsheet UI
import React, { useState, useRef } from 'react';
import Handsontable from 'handsontable';
import 'handsontable/dist/handsontable.full.css';
import axios from 'axios';

const Home = () => {
    const hotRef = useRef(null);
    const [data, setData] = useState(Array(10).fill(Array(10).fill('')));
    
    const saveSpreadsheet = async () => {
        await axios.post('http://localhost:5000/save', { data });
    };

    return (
        <div>
            <h1>Google Sheets Clone</h1>
            <button onClick={saveSpreadsheet}>Save</button>
            <div ref={hotRef} />
        </div>
    );
};

export default Home;

// ---------------- BACKEND (Node.js + Express) ----------------
// server.js - Handles API for spreadsheet data
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

app.use(cors());
app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/spreadsheet', { useNewUrlParser: true, useUnifiedTopology: true });
const SheetSchema = new mongoose.Schema({ data: Array });
const Sheet = mongoose.model('Sheet', SheetSchema);

app.post('/save', async (req, res) => {
    const sheet = new Sheet({ data: req.body.data });
    await sheet.save();
    res.send('Saved');
});

app.listen(5000, () => console.log('Server running on port 5000'));

// ---------------- ASSIGNMENT 2: CDP Chatbot ----------------
// chatbot.js - Support Agent Chatbot for CDP
const express = require('express');
const fetch = require('node-fetch');
const cors = require('cors');
const bodyParser = require('body-parser');

const app = express();
app.use(cors());
app.use(bodyParser.json());

const CDP_DOCS = {
    segment: 'https://segment.com/docs/',
    mparticle: 'https://docs.mparticle.com/',
    lytics: 'https://docs.lytics.com/',
    zeotap: 'https://docs.zeotap.com/home/en-us/'
};

async function getCDPResponse(question) {
    const response = await fetch('https://api.openai.com/v1/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer YOUR_OPENAI_API_KEY`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            model: 'gpt-4',
            prompt: `Extract relevant information from official CDP documentation for the following question: ${question}\nRelevant sources:\n- Segment: ${CDP_DOCS.segment}\n- mParticle: ${CDP_DOCS.mparticle}\n- Lytics: ${CDP_DOCS.lytics}\n- Zeotap: ${CDP_DOCS.zeotap}`,
            max_tokens: 200
        })
    });
    const data = await response.json();
    return data.choices[0].text;
}

app.post('/chat', async (req, res) => {
    const answer = await getCDPResponse(req.body.question);
    res.send({ answer });
});

app.listen(5001, () => console.log('CDP Chatbot running on port 5001'));

// This covers both assignments - Google Sheets Clone & CDP Support Agent Chatbot!
